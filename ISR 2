#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

void singlePassAlgorithm(int nod, int notoken, float threshold, vector<vector<int>>& input);
float calculateSimilarity(const vector<int>& a, const vector<int>& b);
vector<float> calculateClusterRepresentative(const vector<int>& cluster, const vector<vector<int>>& input, int notoken);

int main() {
    int nod, notoken;
    float threshold;

    cout << "Enter the number of Documents: ";
    cin >> nod;

    cout << "Enter the number of Tokens: ";
    cin >> notoken;

    cout << "Enter the threshold: ";
    cin >> threshold;

    cout << "Enter the Document Token Matrix:" << endl;
    vector<vector<int>> input(nod, vector<int>(notoken));
    for (int i = 0; i < nod; ++i) {
        for (int j = 0; j < notoken; ++j) {
            cout << "Enter (" << i << "," << j << "): ";
            cin >> input[i][j];
        }
    }

    singlePassAlgorithm(nod, notoken, threshold, input);

    return 0;
}

void singlePassAlgorithm(int nod, int notoken, float threshold, vector<vector<int>>& input) {
    vector<vector<int>> cluster(nod, vector<int>(nod + 1));
    vector<vector<float>> clusterRepresentative;

    cluster[0][0] = 1;
    cluster[0][1] = 0;
    int noOfClusters = 1;

    vector<float> temp(notoken);
    for (int i = 0; i < notoken; ++i) {
        temp[i] = static_cast<float>(input[0][i]);
    }
    clusterRepresentative.push_back(temp);

    for (int i = 1; i < nod; ++i) {
        float max = -1;
        int clusterId = -1;

        for (int j = 0; j < noOfClusters; ++j) {
            float similarity = calculateSimilarity(input[i], input[cluster[j][1]]);
            if (similarity > threshold) {
                if (similarity > max) {
                    max = similarity;
                    clusterId = j;
                }
            }
        }

        if (max == -1) {
            cluster[noOfClusters][0] = 1;
            cluster[noOfClusters][1] = i;
            noOfClusters++;
            vector<float> newRep(notoken);
            for (int k = 0; k < notoken; ++k) {
                newRep[k] = static_cast<float>(input[i][k]);
            }
            clusterRepresentative.push_back(newRep);
        } else {
            cluster[clusterId][0]++;
            int index = cluster[clusterId][0];
            cluster[clusterId][index] = i;
            clusterRepresentative[clusterId] = calculateClusterRepresentative(cluster[clusterId], input, notoken);
        }
    }

    for (int i = 0; i < noOfClusters; ++i) {
        cout << "Cluster " << i << ": ";
        for (int j = 1; j <= cluster[i][0]; ++j) {
            cout << "file" << cluster[i][j] + 1;
            if (j < cluster[i][0]) {
                cout << " ";
            }
        }
        cout << endl;
    }
}

float calculateSimilarity(const vector<int>& a, const vector<int>& b) {
    float dotProduct = 0.0, normA = 0.0, normB = 0.0;

    for (int i = 0; i < a.size(); ++i) {
        dotProduct += a[i] * b[i];
        normA += a[i] * a[i];
        normB += b[i] * b[i];
    }

    if (normA == 0 || normB == 0) {
        return 0.0;
    }

    return dotProduct / (sqrt(normA) * sqrt(normB));
}

vector<float> calculateClusterRepresentative(const vector<int>& cluster, const vector<vector<int>>& input, int notoken) {
    vector<float> representative(notoken, 0.0);

    for (int i = 1; i <= cluster[0]; ++i) {
        for (int j = 0; j < notoken; ++j) {
            representative[j] += static_cast<float>(input[cluster[i]][j]);
        }
    }

    for (int j = 0; j < notoken; ++j) {
        representative[j] /= cluster[0];
    }

    return representative;
}

OUTPUT:
Enter the number of Documents: 3
Enter the number of Tokens: 5
Enter the threshold: 0.7
Enter the Document Token Matrix:
Enter (0,0): 1
Enter (0,1): 0
Enter (0,2): 1
Enter (0,3): 0
Enter (0,4): 1
Enter (1,0): 0
Enter (1,1): 1
Enter (1,2): 0
Enter (1,3): 1
Enter (1,4): 0
Enter (2,0): 1
Enter (2,1): 1
Enter (2,2): 1
Enter (2,3): 1
Enter (2,4): 1
Cluster 0: file1 file3
Cluster 1: file2
